Pseudo_code and results for sample 1:

essential_2_1 = get_essential(pts2_norm, pts1_norm)
essential_3_2= get_essential(pts3_norm, pts2_norm)


essential_2_1 = [[ 0.61727929 0.31774732 0.04407438]
[ 0.1427721 -0.0021857 0.00720589]
[ 0.31190646 -0.63107327 -0.00898217]]

essential_3_2 = [[ 0.01650688 -0.4841282 -0.13852572]
[-0.57313569 0.07905834 0.35632379]
[ 0.2239518 0.48404293 -0.00216302]]


solutions_2_1 = get_possible_solutions(essential_2_1)
solutions_3_2 = get_possible_solutions(essential_3_2)

-> Use triangulation to choose correct solution

R_2_1 = [[-0.44175538 0.88138891 -0.16734927]
[-0.04723791 0.16342658 0.98542394]
[ 0.89589104 0.44322156 -0.0305596 ]]

t_2_1 = [[ 0.17920808]
[-0.97934624]
[ 0.09362377]]

R_3_2 = [[ 0.27453622 0.27316558 -0.9219601 ]
[-0.34309568 -0.86786348 -0.35930256]
[-0.8982846 0.4149621 -0.14453803]]

t_3_2 = [[0.70165198]
[0.27676263]
[0.65657212]]


R_3_1 = R_2_1 @ R_3_2 = [[-0.27335131 -0.95504122 0.11478388]
[-0.95423061 0.25417785 -0.15759935]
[ 0.12133835 -0.15261028 -0.98080941]]

t_3_1 = R_2_1 @ t_3_2 + t_2_1 = [[ 0.00330819]
[-0.32025856]
[ 0.82483008]]

And normed t:

t_3_1_normed = [[ 0.00330819]
[-0.32025856]
[ 0.82483008]]